#Create sequence dictionary
java -jar /mnt/a../laspinema/picard/picard.jar CreateSequenceDictionary REFERENCE=reference.fasta(O.acuminata.fna)
OUTPUT=reference.dict

#Index reference genome
bwa index -a bwtsw O.acuminata.fna -p O.acuminata.fna  #ref.amb/ann/bwt/fasta/pac/sa created
samtools faidx O.acuminata.fna

#Align trimmed reads and assign read group (bwamem version 0.7.17-r1188)
bwa mem -R '@RG\tIDILLUMINA\tSM:SampleD2_2_18b_..\tSW:bwa' O.acuminata.fna R1.fastq.gz R2.fastq.gz > aln.sam

#Convert SAM file to BAM
samtools view -bS aln.sam -o aln.bam

#Sort BAM file (picard version 2.25.1)
samtools sort aln.bam > sorted.bam

#Index sorted BAM file
samtools index sorted.bam

#Mark duplicates
java -jar /mnt/a../laspinema/picard/picard.jar MarkDuplicates -I sorted.bam -O dedup.bam -METRICS_FILE metrics.txt

#Sort bam file
samtools index dedup.bam
(java -jar /mnt/a../laspinema/picard/picard.jar BuildBamIndex -I dedup.bam)

#Call Variants (HaplotypeCaller) with invariant sites as well
java -jar /absolute/path/to/gatk.jar HaplotypeCaller -R /path/Reference/Oscillatoria_acuminata.fna -I dedup.bam
-ploidy 1 -ERC BP_RESOLUTION -O ./BP-resolution/raw_sample_bpresol.g.vcf.gz

#Merge g.vcfs
java -jar /path/gatk.jar CombineGVCFs -R reference -V /path/to/g.vcf/
or
java -jar /pathtogatk/ GenomicsDBImport -V samples.g.vcf --genomicsdb-workspace-path my_database/ -L NC_019694.1 -L NC_019700.1 -L NC_019693.1

#Joint genotyping without the outgroup
java -jar /mnt/.../gatk/gatk/gatk.jar GenotypeGVCFs -R O.acuminata.fna -V gendb://my_database -O GVCFall_genotyped.vcf
(-V GVCFal_without_outgroup.vcf.gz -all-sites -O GVCFall_genotyped.vcf)

#Annotate variants using snpEff
#Names of the chromosome in vcf file has to be the same as chr name in reference from SnpEff database
awk '{gsub(/NC_.../, "Chromosome"); gsub(/NC_.../), "pOSCIL6304.01"); gsub(/NC_.../), "pOSCIL6304.02");print;}' initial.vcf > newchr.vcf
java -jar /pathtosnpEff/ -ud 0 -formatEff -v Oscillatoria_acuminata_pcc_6304 GVCFall_genotyped.vcf > Annotation_Gvcfall_gen.ann.vcf -s Ann_Gvcf.ann.html

#Select SNP and Indel variants
java -jar /pathtogatk/ SelectVariants -R ref.seq -V Annotation_Gvcfall.ann.vcf -select-type SNP -O Gvcfall_out_snp.vcf
-select-type INDEL

#SNPs and indel filtration separately (SNPs for phylogeny)
java -jar /pathtogatk/ VariantFiltration -R ref.seq --filter-expression "QD < 2.0" --filter-name "QD2" --filter-expression "SOR > 3.0"
--filter-name "SOR3" --filter-expression "QUAL < 500.0" --filter-name "QUAL" --filter-expression "MQ < 40.0" --filter-name "MQ40"
--filter-expression "FS > 60.0" --filter-name "FS60" --cluster-size 3 --cluster-window-size 10 -O snps_filtered.vcf

java -jar /pathtogatk/ VariantFiltration -R ref.seq --filter-expression "QD < 2.0" --filter-name "QD2-ind"
--filter-expression "QUAL < 500.0" --filter-name "QUAL-ind" --filter-expression "FS > 200" --filter-name "FS200"
--filter-expression "ReadPosRankSum < -20.0" --filter-name "ReadPosRankSum-ind" -O indels_filtered.vcf

#SNPs and Indels that passed filtration
java -jar SelectVariants -R ref.seq -V sample_filteredSNP.vcf -O sample_filteredSNP_passed.vcf --exclude-filtered
-Indels

#Filter main gvcf file from bad SNPs while keeping non variant sites (main gvcf - GVCFall_allsites_snps_filtered_withoutQUAL.vcf)
java -jar /pathtogatk/ VariantFiltration -R ref.seq --filter-expression "QD < 2.0" --filter-name "QD2" --filter-expression "SOR > 3.0"
--filter-name "SOR3" --filter-expression "MQ < 40.0" --filter-name "MQ40" --filter-expression "MQRankSum < -12.5" --filter-name "MQRankSum"
--filter-expression "ReadPosRankSum < -8.0" --filter-name "ReadPosRankSum"
--filter-expression "FS > 60.0" --filter-name "FS60" (--cluster-size 3 --cluster-window-size 10) -O GVCFall_allsites_snps_filtered.vcf

java -jar /mnt/adde8876-459b-4089-bd8c-252e4527a8ab/laspinema/gatk4.2.0.0/gatk-4.2.0.0/gatk-package-4.2.0.0-local.jar VariantFiltration
-V GVCFall_genotyped_with_all_sites.vcf -R /mnt/adde8876-459b-4089-bd8c-252e4527a8ab/laspinema/SNP_calling/O.acuminata.fna
--filter-expression "QD < 2.0" --filter-name "QD2" --filter-expression "SOR > 3.0" --filter-name "SOR3" --filter-expression "MQ < 40.0"
--filter-name "MQ40" --filter-expression "FS > 60.0" --filter-name "FS60" --filter-expression "MQRankSum < -12.5" --filter-name "MQRankSum"
--filter-expression "ReadPosRankSum < -8.0" --filter-name "ReadPosRankSum" -O GVCFall_allsites_snps_filtered.vcf

java -jar /mnt/adde8876-459b-4089-bd8c-252e4527a8ab/laspinema/gatk4.2.0.0/gatk-4.2.0.0/gatk-package-4.2.0.0-local.jar SelectVariants
-V GVCFall_allsites_snps_filtered.vcf -R /mnt/adde8876-459b-4089-bd8c-252e4527a8ab/laspinema/SNP_calling/O.acuminata.fna
-O GVCFall_allsites_filtered_passed.vcf --exclude-filtered --max-indel-size 0

#split invariable sites
- vcftools --max-maf 0/
tst_invr.vcf

-gatk QUAL < 0/
tst_invr_filt

-gatk SelectVariants/ all invariable sites marked PASSED (without maf 0 SNPs)
tst_invr_filt_all


vcftools --vcf GVCF_snps_filtered_passed.vcf --minGQ 30 --maf 0.1 --min-meanDP 40 --max-meanDP 202
--max-alleles 2 --min-alleles 2 --stdout --recode | bgzip -c > ./variables.vcf.gz

tabix -p vcf variables.vcf.gz
bcftools concat -a variables.vcf.gz tst_invariables.vcf.gz -Ov -o all.vcf
sed 's/.\/././g' all.vcf > all_parsed.vcf


java -jar /pathtogatk/ SelectVariants -R ref.seq -V sample_filteredSNP.vcf -O sample_filteredSNP_passed.vcf --exclude-filtered
(because of QUAL, non variant sites marked as NON-PASS; when excluded that filter, worked)  maybe --max-indel-size 0

#Deciding on filter
#Calculate allele frequency
vcftools --gzvcf file.vcf --freq2 --out allele_freq.out --max-alleles 2
#Calculate mean depth per individual
vcftools --gzvcf file.vcf --depth --out mdperind.out
#Calculate mean depth per site
vcftools --gzvcf --site-mean-depth --out

#Filter SNPs and Indels (vcftools)
vcftools --vcf raw.vcf --minQ 30 --minDP 50 --maxDP 170 --recode --stdout | gzip -c > ./SNPs_and_indels_filtered.vcf.gz
gunzip SNPs_and_indels_filtered.vcf.gz #this for the phylogeny and used not for gVCF

#Extract SNPs and Indels
java -jar /mnt/a../laspinema/gatk4.2.0.0/gatk-4.2.0.0/gatk-package-4.2.0.0-local.jar SelectVariants
-R Oscillatoria_acuminata.fna -V raw.vcf -select-type SNP (or INDEL) -O raw_snps.vcf

#very similar results - inferred phylogeny from SNPs extracted this way and directly from gvcf file (with lowered filtering criterium and using bvcftolls)
genotyped using the function -all-sites
vcftools --vcf GVCFall_genotyped.vcf --minQ 30 --minDP 40 --maxDP 130 --recode --stdout | (b)gzip -c > ./GVCFall_genotyped_filtered.vcf

bvcftools filter -e 'FORMAT/DP<5 | FORMAT/GQ < 30' --set-GTs . (it converts uncertain genotypes to missing) GVCFall_genotyped.vcf -O u
| bcftools view -U -i 'TYPE=="snp" & MAX >= 2' > output_filter_filtered
iqtree from SNP dataset position of 2 strains were inverted from the same clade.

#Extract regions of 5 thousand bp vcf2fasta to infer phylo.trees and then visualize in DensiTree (program PHAST v1.6)

msa_split GVCFall_genotyped.min0.fasta --in-format FASTA --windows 50000,0 --out-format FASTA --out-root results_blocks_1


#Make_consensus_alternate
java -jar ../gatkk/.. FastaAlternateReferenceMaker -R ref.genome -O sample_ID.fasta -V sample_id.vcf.gz

#Convert VCF format to PHYLIP, FASTA, NEXUS, binary NEXUS (https://github.com/edgardomortiz/vcf2phylip) with non variant sites

python3 vcf2fasta.py -i merged.vcf -o specified_outgroup -f -n -b -m (0-4; how many genotypes to exclude due to the missing data allowed)

#Convert genotyped VCF to fastq and then to fasta for sliding window analysis (5k and 10k), to infer phylogenetic trees

#Annotation of ref genome Oscillatoria acuminata

prokka --outdir ./prokka_Oscillatoria Oscillatoria_acuminata.fna

#Pan-genome analysis
roary -f ./output_directory_name -e -n -v ./*.gff
python roary_plot.py SpeciesTreeAlignment.nwk gene_presence_absence.csv

#Find genes that (dis)associate with other genes more often than expected by chance in the pangenome
coinfinder -i gene_presence_absence.csv -I -a (-d) -p SpeciesTreeAlignment.nwk -o coincident_output -m -g -v -E

#Astral
java -jar astral.5.7.7.jar -i in.tree -o out.tre 2>out.log

#Saguaro
#before using fasta shorten headers up to 10 characters (for phylip later)
sed 's/Sample_//' GVCF_fastafile > GVCF_names_saguaro.fasta
/home/dvorikus/programs/saguaro/saguarogw-code-r44/Fasta2HMMFeature -i fasta/maf file -o file_saguaro_out -nosame
/home/dvorikus/programs/saguaro/saguarogw-code-r44/Saguaro -f binary_file_from_saguaro -o saguaro_output_dir -iter 20
ruby paint_chromosomes.rb saguaro_dir/LocalTrees.out LocalTrees.svg
Saguaro2Phylip -i saguaro.cactus
phylip neighbor infile
#put the name of the fasta file you sued to run saguaro directly in the script and then run it
ruby generate_alignments.rb LocalTrees.out /path/to/dir/with/fasta /name/of/the/output/dir/*alignment_blocks

#Calculate ANI value using fastANI
#input file is text file containing names of the genomes for comparisson (genome assemblies/.fna/fasta)
ls -1 ./dir_where_genomes_are/* > text_input_genomes.txt
fastANI --ql text_input_genomes.txt --rl text_input_genomes.txt --matrix -o fastani.out

#Gubbins 3.1.3 for recombination
conda create -n gubbins-env python=3.8
conda activate gubbins-env
conda install -c r -c defaults -c conda-forge -c bioconda gubbins
run_gubbins.py --prefix gubbins_out --filter-percentage 35.0 [default is 25, and we had lot of missing data] --first-tree-build rapidnj --first-model JC --tree-builder iqtree --model GTRGAMMA --iterations 2 [at 4 gubbins crashed] GVCFall_alignment.fasta

#run_gubbins.py --prefix gubbins_out --filter-percentage 35.0 --first-tree-build rapidnj --first-model JC (recommended as first building tree software)
--tree-builder raxmlng (iqtree crashes >3 iterations) --model GTR GVCFall_alignment.fasta (iterations default 5)
#in dir Gubbins_redo_test
#with new dataset 32 filter percentage

#view list of samples in vcf
bcftools query -l GVCF.vcf
#make text files with samples names and populations
#make subset population vcfs
bcftools view -S ./D2.txt -o GVCF_D2.vcf (your vcf)GVCF.vcf
bcftools view -S ./D3.txt ( -O z #if you want it zipped) -o GVCF_D3.vcf GVCF.vcf
#Estimate LD for chromosome NC_019693.1 on D2 and D3 subset populations
bgzip -c D3_snps.vcf > D3_snps.vcf.gz
tabix -p vcf D3_snps.vcf.gz
bcftools view D3_snps.vcf.gz --regions NC_019693.1 > D3_snps_chr.vcf.gz
#do the LD per population
#Let's do the LD using plink
#Prepare input files for plink, we need map+ped from vcftools first
#for thinning SNPs

vcftools --gzvcf SNP.vcf.gz --recode --recode-INFO-all --thin 250(for both) --out snp_chr_thin.vcf.gz

vcftools --vcf snps_chr.vcf.recode.gz --plink --out D2forLD

conda activate bedops-env
(plink v1.90b6.21)

plink --vcf D2_snps_chr.vcf.gz --keep-allele-order --indiv-sort file SampleSort.list (this is text file, that has input like fam file 0 first column, second sample names as in vcf)
--const-fid 0 (we have _ in names of samples) --allow-extra-chr 0 --make-bed --out D2forLD
#after this we have map, ped, bed, bim and fam file. Ready for LD (calculate r2 between SNPs in 50kb sw)
plink --file D2forLD --r2 --ld-window-kb 50 --ld-window 99999 --ld-window-r2 0 --out D2_snps_50kb_ld
#pairwise over whole genome
plink --file D2forLD --r2 --ld-window 999999 --ld-window-kb 9999999 --ld-window-r2 0 --out D2_pairwise_snps_ld

cat snp-thin.ld | sed 1,1d | awk -F " " 'function abs(v) {return v < 0 ? -v : v}BEGIN{OFS="\t"}{print abs($5-$2),$7}' |
sort -k1,1n > snp-thin.ld.summary
library(ape)
library(tidyverse)
library(PopGenome)
library(dplyr)
library(ggplot2)
laspinema <- readData("./alignment", format = "fasta", include.unknown = TRUE, FAST = TRUE)
#Text file on populations; ind column with sample names and pop column with D3 or D2
laspinema_info <- read_delim("./laspinema_info.txt", delim = "\t")
populations <- split(laspinema_info$ind, laspinema_info$pop)
laspinema <- set.populations(laspinema, populations, diploid = F)
laspinema@populations
laspinema_sw_50 <- sliding.window.transform(laspinema, width = 50000, jump = 12500, type = 2)
length(laspinema_sw_50@region.names)
laspinema_sw_50 <- diversity.stats(laspinema_sw_50, pi = TRUE)
laspinema_nuc_div_sw_50 <- laspinema_sw_50@nuc.diversity.within
laspinema_nuc_div_sw_50 <- laspinema_nuc_div_sw_50/50000
position <- seq(from = 1, to = 7804270, by = 12500) + 50000
position <- seq(from = 1, to = 7804270, by = 12500)
window_stop <- position + 50000
sum(window_stop > 7804270)
position <- position[which(window_stop < 7804270)]
window_stop <- window_stop[which(window_stop < 7804270)]
windows <- data.frame(start=position, stop=window_stop, mid= position + (window_stop - position)/2)
laspinema_nd_sw_50 <- data.frame(windows, laspinema_nuc_div_sw_50, row.names = NULL)
laspinema_nd_sw_50 <- as_tibble(laspinema_nd_sw_50)

#Calculate Fst
laspinema_sw_50_fst <- F_ST.stats(laspinema_sw_50, mode = "nucleotide")
nd_50 <- laspinema_sw_50_fst@nuc.diversity.within/50000
pops <- c("D2", "D3")
colnames(nd_50) <- paste0(pops, "_pi")
Fst_value_50 <- t(laspinema_sw_50_fst@nuc.F_ST.pairwise)
dxy_50 <- get.diversity(laspinema_sw_50_fst, between = T) [[2]]/50000
x <- colnames(Fst_value_50)
x <- sub("pop1", "D2", x)
x <- sub("pop1", pops[1], x)
x <- sub("pop2", pops[2], x)
x <- sub("/", "_", x)
colnames(Fst_value_50) <- paste0(x, "_fst")
colnames(dxy_50) <- paste0(x, "_dxy")
#Data frame with all the values; Fst, Dxy, piD2, piD1
laspinema_data_50 <- as_tibble(data.frame(windows, nd_50, Fst_value_50, dxy_50))
laspinema_data_50 %>% select(contains("pi")) %>% summarise_all(mean)
#remove the row with the outlier region - inflated Fst, has 8 SNPs in 50kb (2886362SNP)
#load new file without the region
withoutpknD <- read.csv("E:/Nez vise/pop genomics/withoutpknD.csv", row.names=1)
#plot all the values
Fst_plot_50 <- ggplot(withoutpknD, aes(mid/10^6, D2_D3_fst)) + geom_line(colour="red") + geom_point(size=1, col="red")
Fst_plot_50 <- Fst_plot_50 + xlab("Position (Mb)") + ylab(expression(italic(F)[ST])) + ylim(0,0.8)
Fst_plot_50
ggplot(withoutpknD, aes(mid/10^6, D2_pi)) + geom_line(colour="blue") + theme_light() + geom_point(size=1.2, colour="blue") + xlab("Position (Mb)") + ylab("pi D2")
ggplot(withoutpknD, aes(mid/10^6, D3_pi)) + geom_line(colour="blue") + theme_light() + geom_point(size=1.2, colour="blue") + xlab("Position (Mb)") + ylab("pi D3") + ylim(0, 0.045)
ggplot(withoutpknD, aes(mid/10^6, D2_D3_dxy)) + geom_line(colour="purple") + geom_point(size=1,col="purple") + theme_light() + ylim(0, 0.08) + xlab("Position (Mb)") + ylab(expression(D[XY]))

combined <- withoutpknD %>% select(mid, D2_D3_dxy, D2_D3_fst)
combined_g <- gather(combined, -mid, key="stat", value="value")
combined <- ggplot(combined_g, aes(mid/10^6, value, color=stat)) + geom_line(size=1)
combined <- combined + facet_grid(stat~., scales = "free_y")
combined <- combined + xlab("Position (Mb)")
combined + theme_bw() + theme(legend.position = "none", text = element_text(size=20)) + geom_point(size=1.5)

#box plots pi, Tajimas D and wilcox test
pi_g <- withoutpknD %>% select(contains("pi")) %>% gather(key = "species", value = "pi")
ggplot(pi_g, aes(species, pi)) + geom_boxplot() + theme_light() + xlab(NULL)

D2pi <- pull(withoutpknD, D2_pi)
D3pi <- pull(withoutpknD, D3_pi)
wilcox.test(D3pi, D2pi, exact = FALSE, alternative = "less", conf.int = 0.95)
####Wilcoxon rank sum test with continuity correction (WITH OUTLIER)
###data:  D3pi and D2pi
##W = 3337.5, p-value < 2.2e-16
#alternative hypothesis: true location shift is less than 0
#95 percent confidence interval:
#  -Inf -0.02546681
#sample estimates:
#  difference in location 
#-0.02592962
#########Wilcoxon rank sum test with continuity correction (WITHOUT OUTLIER)
######data:  D3pi and D2pi
####W = 10648, p-value < 2.2e-16
#alternative hypothesis: true location shift is less than 0
#95 percent confidence interval:
#  -Inf -0.01206736
#sample estimates:
#  difference in location 
#-0.01243967

output_50kb_D2withoutpknD_changedMIDppointPLASMID.tajimaD <- read.delim("E:/Nez vise/pop genomics/output_50kb_D2withoutpknD_changedMIDppointPLASMID.tajimaD.txt")
ggplot(output_50kb_D2withoutpknD_changedMIDppointPLASMID.tajimaD, aes(MID/10^6, TajimaD)) + geom_line(colour="blue") + theme_light() + geom_point(size=1.2, colour="blue") + xlab("Position (Mb)") + ylab("D2 Tajima's D") + ylim(0,3)
ggplot(output_50kb_D3withoutpknD_changedMIDppointPLASMID.tajimaD, aes(MID/10^6, TajimaD)) + geom_line(colour="blue") + theme_light() + geom_point(size=1.2, colour="blue") + xlab("Position (Mb)") + ylab("D3 Tajima's D") + ylim(0,3)

D2taji <- pull(output_50kb_D2withoutpknD_changedMIDppointPLASMID.tajimaD, TajimaD)
D3taji <- pull(output_50kb_D3withoutpknD_changedMIDppointPLASMID.tajimaD, TajimaD)
wilcox.test(D3taji, D2taji, exact = FALSE, alternative = "greater", conf.int = 0.95)
#####Wilcoxon rank sum test with continuity correction
####data:  D3taji and D2taji
###W = 228744, p-value = 4.267e-10
##alternative hypothesis: true location shift is greater than 0
#95 percent confidence interval:
#  0.02977932        Inf
#sample estimates:
#  difference in location 
#0.04062686 

